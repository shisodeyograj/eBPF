// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDrop_packets returns the embedded CollectionSpec for drop_packets.
func loadDrop_packets() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Drop_packetsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load drop_packets: %w", err)
	}

	return spec, err
}

// loadDrop_packetsObjects loads drop_packets and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*drop_packetsObjects
//	*drop_packetsPrograms
//	*drop_packetsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDrop_packetsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDrop_packets()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// drop_packetsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type drop_packetsSpecs struct {
	drop_packetsProgramSpecs
	drop_packetsMapSpecs
}

// drop_packetsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type drop_packetsProgramSpecs struct {
	DropPackets *ebpf.ProgramSpec `ebpf:"drop_packets"`
}

// drop_packetsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type drop_packetsMapSpecs struct {
	BpfPortMap *ebpf.MapSpec `ebpf:"bpf_port_map"`
}

// drop_packetsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDrop_packetsObjects or ebpf.CollectionSpec.LoadAndAssign.
type drop_packetsObjects struct {
	drop_packetsPrograms
	drop_packetsMaps
}

func (o *drop_packetsObjects) Close() error {
	return _Drop_packetsClose(
		&o.drop_packetsPrograms,
		&o.drop_packetsMaps,
	)
}

// drop_packetsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDrop_packetsObjects or ebpf.CollectionSpec.LoadAndAssign.
type drop_packetsMaps struct {
	BpfPortMap *ebpf.Map `ebpf:"bpf_port_map"`
}

func (m *drop_packetsMaps) Close() error {
	return _Drop_packetsClose(
		m.BpfPortMap,
	)
}

// drop_packetsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDrop_packetsObjects or ebpf.CollectionSpec.LoadAndAssign.
type drop_packetsPrograms struct {
	DropPackets *ebpf.Program `ebpf:"drop_packets"`
}

func (p *drop_packetsPrograms) Close() error {
	return _Drop_packetsClose(
		p.DropPackets,
	)
}

func _Drop_packetsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed drop_packets_bpfeb.o
var _Drop_packetsBytes []byte
